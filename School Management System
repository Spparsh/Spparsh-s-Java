import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Scanner;

class Person {
    public String name;

    public Person(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}

class Student extends Person {
    public int age;
    public String grade;

    public Student(String name, int age, String grade) {
        super(name);
        this.age = age;
        this.grade = grade;
    }

    public int getAge() {
        return age;
    }

    public String getGrade() {
        return grade;
    }
}

class Teacher extends Person {
    public int subject;

    public Teacher(String name, int subject) {
        super(name);
        this.subject = subject;
    }

    public int getSubject() {
        return subject;
    }
}

class Course {
    public String courseName;
    public Teacher teacher;
    public ArrayList<Student> students;

    public Course(String courseName, Teacher teacher) {
        this.courseName = courseName;
        this.teacher = teacher;
        this.students = new ArrayList<>();
    }

    public String getCourseName() {
        return courseName;
    }

    public void addStudent(Student student) {
        students.add(student);
    }

    public void displayStudents() {
        if (!students.isEmpty()) {
            System.out.println("Students enrolled in " + courseName + ":");
            for (Student student : students) {
                System.out.println("Name: " + student.getName() + ", Age: " + student.getAge() + ", Roll No: " + student.getGrade());
            }
        } else {
            System.out.println("No students enrolled in " + courseName);
        }
    }
}

public class Demo1
 {
    public ArrayList<Teacher> teachers;
    public ArrayList<Course> courses;
    public Scanner scanner;

    public Demo1() {
        this.teachers = new ArrayList<>();
        this.courses = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    public void addTeacher(String name, int subject) {
        if (!name.isEmpty()) {
            teachers.add(new Teacher(name, subject));
        } else {
            System.out.println("Teacher name or ID cannot be empty!");
        }
    }

    public void addCourse(String courseName, String teacherName) {
        if (!courseName.isEmpty() && !teacherName.isEmpty()) {
            Teacher teacher = findTeacher(teacherName);
            if (teacher != null) {
                courses.add(new Course(courseName, teacher));
            } else {
                System.out.println("Teacher not found!");
            }
        } else {
            System.out.println("Course name or teacher name cannot be empty!");
        }
    }

    public Teacher findTeacher(String name) {
        for (Teacher teacher : teachers) {
            if (teacher.getName().equalsIgnoreCase(name)) {
                return teacher;
            }
        }
        return null;
    }

    public void addStudentToCourse() {
        try {
            System.out.println("\nEnter student name: ");
            String studentName = scanner.nextLine();
            System.out.println("Enter student age: ");
            int studentAge = scanner.nextInt();
            System.out.println("Enter student roll no: ");
            String studentGrade = scanner.nextLine();

            Student student = new Student(studentName, studentAge, studentGrade);

            System.out.println("Enter the course name to add student to: ");
            String courseName = scanner.nextLine();

            Course course = findCourse(courseName);
            if (course != null) {
                course.addStudent(student);
                System.out.println("Student added to course successfully!");
            } else {
                System.out.println("Course not found!");
            }
        } catch (NumberFormatException e) {
            System.out.println("Invalid input for age. Please enter a valid integer.");
        }
    }

    public Course findCourse(String name) {
        for (Course course : courses) {
            if (course.getCourseName().equalsIgnoreCase(name)) {
                return course;
            }
        }
        return null;
    }

    public void displayTeachers() {
        System.out.println("List of Teachers:\n");
        if (!teachers.isEmpty()) {
            for (Teacher teacher : teachers) {
                System.out.println("Name: " + teacher.getName() + ", ID: " + teacher.getSubject());
            }
        } else {
            System.out.println("No teachers found.");
        }
    }

    public void displayCourses() {
        System.out.println("List of Courses:\n");
        if (!courses.isEmpty()) {
            for (Course course : courses) {
                System.out.println("Course Name: " + course.getCourseName() + ", Teacher: " + course.teacher.getName());
                course.displayStudents();
            }
        } else {
            System.out.println("No courses found.");
        }
    }

    public void displayStudents() {
        System.out.println("List of Students:\n");
        if (!courses.isEmpty()) {
            for (Course course : courses) {
                course.displayStudents();
            }
        } else {
            System.out.println("No students found.");
        }
    }

    public static void main(String[] args) {
        Demo1 school = new Demo1();

        while (true) {
            System.out.println("\n\n\t\t\t\t* Welcome to Cambridge School *\n\n");
            System.out.println("\n\n\t\t1. Add Teacher");
            System.out.println("\t\t2. Add Course");
            System.out.println("\t\t3. Add Student to Course");
            System.out.println("\t\t4. Display Teachers");
            System.out.println("\t\t5. Display Courses");
            System.out.println("\t\t6. Display Students");
            System.out.println("\t\t7. Exit");
            System.out.print("\n\n\t\tEnter your choice: ");

            try {
                int choice = school.scanner.nextInt();
                school.scanner.nextLine(); 

                switch (choice) {
                    case 1:
                        System.out.print("Enter teacher name: ");
                        String teacherName = school.scanner.nextLine();
                        System.out.print("Enter teacher ID: ");
                        int teacherSubject = school.scanner.nextInt();
                        school.addTeacher(teacherName, teacherSubject);
                        break;
                    case 2:
                        System.out.print("Enter course name: ");
                        String courseName = school.scanner.nextLine();
                        System.out.print("Enter teacher name for the course: ");
                        String teacherForCourse = school.scanner.nextLine();
                        school.addCourse(courseName, teacherForCourse);
                        break;
                    case 3:
                        school.addStudentToCourse();
                        break;
                    case 4:
                        school.displayTeachers();
                        break;
                    case 5:
                        school.displayCourses();
                        break;
                    case 6:
                        school.displayStudents();
                        break;
                    case 7:
                        System.out.println("Exiting...\nThank You for viewing this project by:\n1531. Tanvi Jagtap\n1532. Sharva Jamdar\n1533. Spparsh Jawade\n\nHope you liked it...");
                        System.exit(0);
                    default:
                        System.out.println("Invalid choice! Please enter a valid option.");
                }
            } catch (InputMismatchException e) {
                System.out.println("Invalid choice! Please enter a valid option.");
                school.scanner.nextLine(); // Clear the buffer
            }
        }
    }
}	
